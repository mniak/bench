// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mniak/bench/old_stuff/domain (interfaces: ToolchainLoader)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/mniak/bench/old_stuff/domain"
)

// MockToolchainLoader is a mock of ToolchainLoader interface.
type MockToolchainLoader struct {
	ctrl     *gomock.Controller
	recorder *MockToolchainLoaderMockRecorder
}

// MockToolchainLoaderMockRecorder is the mock recorder for MockToolchainLoader.
type MockToolchainLoaderMockRecorder struct {
	mock *MockToolchainLoader
}

// NewMockToolchainLoader creates a new mock instance.
func NewMockToolchainLoader(ctrl *gomock.Controller) *MockToolchainLoader {
	mock := &MockToolchainLoader{ctrl: ctrl}
	mock.recorder = &MockToolchainLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolchainLoader) EXPECT() *MockToolchainLoaderMockRecorder {
	return m.recorder
}

// InputExtensions mocks base method.
func (m *MockToolchainLoader) InputExtensions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputExtensions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// InputExtensions indicates an expected call of InputExtensions.
func (mr *MockToolchainLoaderMockRecorder) InputExtensions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputExtensions", reflect.TypeOf((*MockToolchainLoader)(nil).InputExtensions))
}

// Load mocks base method.
func (m *MockToolchainLoader) Load() (domain.Toolchain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(domain.Toolchain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockToolchainLoaderMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockToolchainLoader)(nil).Load))
}

// OutputExtension mocks base method.
func (m *MockToolchainLoader) OutputExtension() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputExtension")
	ret0, _ := ret[0].(string)
	return ret0
}

// OutputExtension indicates an expected call of OutputExtension.
func (mr *MockToolchainLoaderMockRecorder) OutputExtension() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputExtension", reflect.TypeOf((*MockToolchainLoader)(nil).OutputExtension))
}
