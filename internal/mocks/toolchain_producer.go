// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mniak/bench/domain (interfaces: ToolchainProducer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/mniak/bench/domain"
)

// MockToolchainProducer is a mock of ToolchainProducer interface.
type MockToolchainProducer struct {
	ctrl     *gomock.Controller
	recorder *MockToolchainProducerMockRecorder
}

// MockToolchainProducerMockRecorder is the mock recorder for MockToolchainProducer.
type MockToolchainProducerMockRecorder struct {
	mock *MockToolchainProducer
}

// NewMockToolchainProducer creates a new mock instance.
func NewMockToolchainProducer(ctrl *gomock.Controller) *MockToolchainProducer {
	mock := &MockToolchainProducer{ctrl: ctrl}
	mock.recorder = &MockToolchainProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolchainProducer) EXPECT() *MockToolchainProducerMockRecorder {
	return m.recorder
}

// Produce mocks base method.
func (m *MockToolchainProducer) Produce(arg0 string) (domain.Toolchain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", arg0)
	ret0, _ := ret[0].(domain.Toolchain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Produce indicates an expected call of Produce.
func (mr *MockToolchainProducerMockRecorder) Produce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockToolchainProducer)(nil).Produce), arg0)
}
